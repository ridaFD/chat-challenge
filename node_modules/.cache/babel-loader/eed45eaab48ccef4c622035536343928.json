{"ast":null,"code":"var _jsxFileName = \"/home/rida/chat-challenge/src/App.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isConnected: false,\n      id: null,\n      peeps: [],\n      message: '',\n      room_message: []\n    };\n    this.socket = null;\n\n    this.onClick = e => {\n      e.preventDefault();\n      let message = {\n        id: this.state.id,\n        name: 'Baseeeeeeeeeel',\n        text: this.state.message\n      };\n      this.socket.emit('message', message); // this.socket.on('room_message',(room_message)=>{\n      //   console.log('server answered!'\n      //   )\n      // })\n    };\n  }\n\n  componentWillMount() {\n    this.socket = io('https://codi-server.herokuapp.com');\n    this.socket.on('connect', () => {\n      this.setState({\n        isConnected: true\n      });\n    });\n    this.socket.on('pong!', () => {\n      console.log('the server answered!');\n    });\n    this.socket.on('disconnect', () => {\n      this.setState({\n        isConnected: false\n      });\n    });\n    this.socket.on('pong!', additionalStuff => {\n      console.log('server answered!', additionalStuff);\n    });\n    this.socket.on('peeps', peeps => {\n      console.log('server answered!', this.setState({\n        peeps\n      }));\n    });\n    this.socket.on('new connection', newId => {\n      const peeps = [...this.state.peeps, newId];\n      this.setState({\n        peeps\n      });\n    });\n    /** this will be useful way, way later **/\n\n    this.socket.on('room', old_messages => this.setState({\n      room_message: old_messages\n    }));\n    this.socket.on('youare', answer => {\n      this.setState({\n        id: answer.id\n      });\n    });\n    this.socket.on('next', message_from_server => console.log('message_from_server==>', message_from_server));\n  }\n\n  componentWillUnmount() {\n    this.socket.close();\n    this.socket = null;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"status: \", this.state.isConnected ? 'connected' : 'disconnected'), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('ping!'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"ping\"), React.createElement(\"button\", {\n      onClick: () => this.socket.emit('whoami'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Who am I?\"), React.createElement(\"input\", {\n      value: this.state.message,\n      onChange: e => {\n        e.preventDefault();\n        this.setState({\n          message: e.target.value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: e => this.onClick(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Chatting\"), this.state.room_message.map(m => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, m.name, \" :\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \" \", m.text))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rida/chat-challenge/src/App.js"],"names":["React","Component","io","App","state","isConnected","id","peeps","message","room_message","socket","onClick","e","preventDefault","name","text","emit","componentWillMount","on","setState","console","log","additionalStuff","newId","old_messages","answer","message_from_server","componentWillUnmount","close","render","target","value","map","m"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport io from 'socket.io-client';\n\nclass App extends Component {\n\n  state = {\n    isConnected:false,\n    id:null,\n    peeps:[],\n    message:'',\n    room_message:[]\n  }\n  socket = null\n\n  componentWillMount(){\n\n    this.socket = io('https://codi-server.herokuapp.com');\n\n    this.socket.on('connect', () => {\n      this.setState({isConnected:true})\n    })\n    this.socket.on('pong!',()=>{\n      console.log('the server answered!')\n    })\n    this.socket.on('disconnect', () => {\n      this.setState({isConnected:false})\n    })\n    this.socket.on('pong!',(additionalStuff)=>{\n      console.log('server answered!', additionalStuff)\n    })\n    this.socket.on('peeps',(peeps)=>{\n      console.log('server answered!', this.setState({peeps})\n      )\n    })\n    this.socket.on('new connection',(newId)=>{\n      const peeps = [...this.state.peeps,newId]\n      this.setState({peeps})\n\n    })\n    /** this will be useful way, way later **/\n    this.socket.on('room', old_messages => this.setState({room_message:old_messages}))\n    this.socket.on('youare',(answer)=>{\n     \n      this.setState({id:answer.id})\n    })\n    this.socket.on('next',(message_from_server)=>console.log('message_from_server==>',message_from_server))\n  }\n\n  componentWillUnmount(){\n    this.socket.close()\n    this.socket = null\n  }\n  onClick =(e)=>{\n    e.preventDefault();\n    let message ={\n      id:this.state.id,\n      name:'Baseeeeeeeeeel',\n      text:this.state.message\n    }\n    this.socket.emit('message',message)\n    // this.socket.on('room_message',(room_message)=>{\n    //   console.log('server answered!'\n    //   )\n    // })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div>status: {this.state.isConnected ? 'connected' : 'disconnected'}</div>\n        <button onClick={()=>this.socket.emit('ping!')}>ping</button>\n        <button onClick={()=>this.socket.emit('whoami')}>Who am I?</button>\n        \n        <input value={this.state.message} onChange={(e)=>{\n              e.preventDefault();\n\n          this.setState({message:e.target.value})}} ></input>\n        <button onClick={(e)=>this.onClick(e)} >Chatting</button>\n    \n          {\n            this.state.room_message.map(m=><div>\n              <h3 >{m.name} :</h3>\n                <p > {m.text}</p> \n              </div>\n              )\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}